#!/usr/bin/env python3
# Copyright (C) 2023 David Boyce
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more detail.
#
# You may have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Summarize the longest-running recipes from an MDSH_DB build with .csv files.
Run "mdsh --help" for details on how to get the .csv data.

Other people have said they were able to import the .csv data to a
spreadsheet which may be the simpler and more flexible way to analyze
it but this little Python script could also be helpful.

Keep in mind that some recipes may be recursive make invocations which
contain many smaller recipes.

EXAMPLES:

Show the 10 longest-running recipes:

    %(prog)s -m10 /tmp/mdsh
"""

import argparse
import glob
import os.path as op

CSV_HDR = ('START TIME', 'PID', 'PPID', 'STATUS', 'ELAPSED',
           'USER TIME', 'SYS TIME', 'MAKELEVEL', 'PWD', 'RECIPE')


def main():
    """Conventional entry point for command line use."""
    parser = argparse.ArgumentParser(
        epilog=__doc__.strip(),
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        '-c', '--concatenate', action='store_true',
        help="dump all .csv files to stdout, sorted by duration")
    parser.add_argument(
        '-k', '--key', type=int, default=5,
        help="sort on the specified key [%(default)s (elapsed time)]")
    parser.add_argument(
        '-m', '--max', type=int, default=0,
        metavar='N',
        help="show the top N (slowest) recipes")
    parser.add_argument(
        '-t', '--truncate', type=int, default=0,
        metavar='N',
        help="truncate recipe command lines to N characters")
    parser.add_argument(
        'path',
        help="path to dir containing generated MDSH .csv files")
    opts = parser.parse_args()

    data = []

    if op.isdir(opts.path):
        paths = glob.glob(op.join(opts.path, '*.csv'))
    else:
        paths = [opts.path]

    for path in paths:
        with open(path, encoding='utf-8') as f:
            for line in f:
                datum = line.strip().split(',', maxsplit=len(CSV_HDR))
                if opts.truncate and len(datum[-1]) > opts.truncate:
                    datum[-1] = datum[-1][:opts.truncate] + ' ...'
                data.append(datum)
    assert data, 'no CSV data found'

    key = opts.key - 1
    if data[0][key][0].isdigit():
        data.sort(key=lambda data: float(data[key]), reverse=True)
    else:
        data.sort(key=lambda data: data[key], reverse=True)

    if opts.concatenate:
        print(','.join(CSV_HDR))
        for i, datum in enumerate(data):
            print(','.join(datum))
        return

    time_zero = min((float(s[0]) for s in data))

    # CSV format is:
    # start time,pid,ppid,status,elapsed,user time,sys time,makelevel,pwd,cmd
    fmt = '%-10s %-10s %s'
    print(fmt % ('STARTED', 'ELAPSED', 'RECIPE'))
    for i, datum in enumerate(data):
        if opts.max and i == opts.max:
            break
        started = str(round(float(datum[0]) - time_zero, 1))
        elapsed = str(round(float(datum[key]), 1))
        cmd = datum[-1]
        if opts.truncate and len(cmd) > opts.truncate:
            cmd = cmd[:opts.truncate] + ' ...'
        print(fmt % (started, elapsed, cmd))


if __name__ == '__main__':
    main()

# Local Variables:
# mode: Python
# indent-tabs-mode: nil
# python-indent: 4
# fill-column: 79
# End:
#
# vim: sw=4:et:tw=79:cc=+1
